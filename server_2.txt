// Программа-сервер
#include <iostream>
#include <fstream>
#include <string>
#include <windows.h>
using namespace std;

struct EmployeeData {
    char name[25];
    int hoursWorked;
    char status[20]; // "standart", "manager", "boss"
};

struct ServerResponse {
    double salary;
    char hoursDeviation[50];// Сообщение об отклонении от нормы
};

// Расчет зарплаты
double calculateSalary(int hours, const string& status) {
    double post;
    if (status == "standart") {
        post = 200.0;
    }
    else if (status == "manager") {
        post = 300.0;
    }
    else if (status == "boss") {
        post = 400.0;
    }
    else {
        return -1.0; 
    }
    return hours * post;
}

string checkWorkingHours(int hours) {
    if (hours == 8) {
        return "Отклонений от нормы нет";
    }
    else if (hours >= 6 && hours <= 7) {
        return "Незначительные отклонения";
    }
    else if (hours < 6) {
        return "Значительные отклонения";
    }
    else {
        return "Переработка";
    }
}

int main() {
    setlocale(LC_ALL, "RU");
    const char* requestFileName = "D:\\REQUEST.bin";
    const char* answerFileName = "D:\\ANSWER.bin";

    cout << "Server is working..." << endl;

    ifstream requestFile;
    ofstream answerFile;
    long lastRequestFileSize = 0;

    while (true) {
        requestFile.open(requestFileName, ios::binary);
        if (!requestFile.is_open()) {
            cout << "Ошибка открытия файла запроса!" << endl;
            Sleep(1000);
            continue;
        }
        requestFile.seekg(0, ios::end);
        long currentRequestFileSize = requestFile.tellg();
        requestFile.close();

        if (currentRequestFileSize > lastRequestFileSize) {

            requestFile.open(requestFileName, ios::binary);
            if (!requestFile.is_open()) {
                cout << "Ошибка открытия файла запроса на чтение!" << endl;
                Sleep(1000);
                continue;
            }
            requestFile.seekg(lastRequestFileSize, ios::beg);

            EmployeeData employee;
            requestFile.read((char*)&employee, sizeof(EmployeeData));
            requestFile.close();

            // Обработка запроса
            string status = employee.status;
            double salary = calculateSalary(employee.hoursWorked, status);
            string hoursDeviation = checkWorkingHours(employee.hoursWorked);



            ServerResponse response;
            response.salary = salary;
            strcpy_s(response.hoursDeviation, hoursDeviation.c_str());  
            // Copy string to char array (safer) -  Скопировать строку в массив символов (безопаснее)
            //Этот код использует функцию strcpy_s для копирования содержимого строки C++ hoursDeviation в буфер response.hoursDeviation

            answerFile.open(answerFileName, ios::binary | ios::app); //режим открытия файла, который добавляет данные в конец файла при его открытии, а не перезаписывает его
            if (!answerFile.is_open()) {
                cout << "Ошибка открытия файла запроса на ответ!" << endl;
                Sleep(1000);
                continue;
            }
            answerFile.write((char*)&response, sizeof(ServerResponse));
            answerFile.close();

            lastRequestFileSize = currentRequestFileSize;
        }
        else {
            Sleep(100);
        }
    }

    return 0;
}
